version: 2.1


executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli


commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
              TERM: xterm-256color
          when: << parameters.when >>

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl -H "token: 2a9e15d6-b9fa-4b1f-a5dc-e3b9643a9b63" --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              echo "migrations:revert"
              npm run migrations:revert
            fi
          when: << parameters.when >>

jobs:

  install-backend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules


  install-frontend-dependencies:
   executor: node
   steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules


  build-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./backend
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist


  build-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./frontend
          command: npm run build

  test-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./frontend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./frontend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results


  test-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./backend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./backend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./backend/test_results
      - store_artifacts:
          path: ./backend/test_results

workflows:
  default:
    jobs:
      - install-backend-dependencies
      - install-frontend-dependencies

      - build-backend:
          requires:
            - install-backend-dependencies
      - build-frontend:
          requires:
            - install-frontend-dependencies
      - test-backend:
          requires:
            - build-backend
      - test-frontend:
          requires:
            -  build-frontend